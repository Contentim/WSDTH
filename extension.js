const vscode = require('vscode');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_CONFIG = {
    baseUrl: 'https://hyttejcjytbgbdfgehhd.supabase.co/rest/v1',
    apiKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh5dHRlamNqeXRiZ2JkZmdlaGhkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxNTcyNDksImV4cCI6MjA3MzczMzI0OX0.SBzMCdm8uPtL01vcGLZSAm0aVeTHobBJrzrjETN1sGo'
};

// URL endpoints
const ENDPOINTS = {
    documents: `${SUPABASE_CONFIG.baseUrl}/websoft_documentation_developer_data`,
    categories: `${SUPABASE_CONFIG.baseUrl}/websoft_documentation_developer_category`
};

// –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞
class TreeItem extends vscode.TreeItem {
    constructor(label, collapsibleState, type = 'file', children = [], id = null, documentationData = null) {
        super(label, collapsibleState);
        this.children = children;
        this.type = type;
        this.contextValue = type;
        this.id = id;
        this.documentationData = documentationData;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (type) {
            case 'folder':
                this.iconPath = new vscode.ThemeIcon('folder');
                break;
            case 'document':
                this.iconPath = new vscode.ThemeIcon('file-text');
                break;
            case 'function':
                this.iconPath = new vscode.ThemeIcon('symbol-method');
                break;
            case 'api':
                this.iconPath = new vscode.ThemeIcon('cloud');
                break;
            case 'loading':
                this.iconPath = new vscode.ThemeIcon('loading');
                break;
            case 'error':
                this.iconPath = new vscode.ThemeIcon('error');
                break;
            default:
                this.iconPath = new vscode.ThemeIcon('file');
        }

        // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∫–∞–∑–∞
        if (type === 'document' || type === 'function') {
            this.command = {
                command: 'treeview-activitybar-demo.showDocumentation',
                title: 'Show Documentation',
                arguments: [this]
            };
        }
    }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ TreeView
class TreeDataProvider {
    constructor() {
        this._onDidChangeTreeData = new vscode.EventEmitter();
        this.onDidChangeTreeData = this._onDidChangeTreeData.event;
        this.data = this.getInitialData();
        this.supabaseData = [];
        this.categoriesMap = new Map();
        this.isLoading = false;
        this.allDocumentItems = [];
        this.categoriesData = new Map(); // –•—Ä–∞–Ω–∏–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.currentCollapseState = vscode.TreeItemCollapsibleState.Collapsed; // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
    rebuildTreeView() {
        if (this.categoriesData.size === 0) return;

        // –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ï —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
        const documentationChildren = Array.from(this.categoriesData.entries()).map(([categoryTitle, docs]) => 
            new TreeItem(
                categoryTitle,
                this.currentCollapseState, // ‚Üê —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ—Ä—ë—Ç—Å—è –æ—Ç—Å—é–¥–∞
                'folder',
                docs.map(doc => 
                    new TreeItem(
                        doc.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        vscode.TreeItemCollapsibleState.None,
                        doc.type || 'document',
                        [],
                        doc.id,
                        doc
                    )
                ),
                categoryTitle // ‚Üê –£–ù–ò–ö–ê–õ–¨–ù–´–ô ID –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ò (–≤–∞–∂–Ω–æ!)
            )
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        const uncategorizedDocs = Array.from(this.categoriesData.entries())
            .flatMap(([categoryTitle, docs]) => categoryTitle === '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' ? docs : [])
            .concat(this.supabaseData.filter(doc => !doc.category && !this.categoriesData.has('–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')));

        if (uncategorizedDocs.length > 0) {
            documentationChildren.push(
                new TreeItem(
                    '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                    this.currentCollapseState,
                    'folder',
                    uncategorizedDocs.map(doc => 
                        new TreeItem(
                            doc.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                            vscode.TreeItemCollapsibleState.None,
                            doc.type || 'document',
                            [],
                            doc.id,
                            doc
                        )
                    ),
                    'uncategorized' // ‚Üê —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                )
            );
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ö–û–†–ù–ï–í–û–ô –º–∞—Å—Å–∏–≤ ‚Äî —Å–æ–∑–¥–∞—ë–º –ù–û–í–´–ô –º–∞—Å—Å–∏–≤
        this.data = [...documentationChildren]; // ‚Üê spread –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

        // –Ø–≤–Ω–æ –≥–æ–≤–æ—Ä–∏–º VS Code: –ø–µ—Ä–µ—Ä–∏—Å—É–π –í–°–Å –¥–µ—Ä–µ–≤–æ
        this._onDidChangeTreeData.fire(undefined);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase —Å join —Ç–∞–±–ª–∏—Ü
    async loadFromSupabase() {
        console.log('Starting Supabase data load with categories...');

        return new Promise((resolve, reject) => {
            vscode.window.withProgress({
                location: vscode.ProgressLocation.Window,
                title: 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...',
                cancellable: false
            }, async (progress) => {
                try {
                    progress.report({ increment: 0 });

                    // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    console.log('Loading categories...');
                    const categoriesResponse = await axios.get(ENDPOINTS.categories, {
                        headers: {
                            'apikey': SUPABASE_CONFIG.apiKey,
                            'Authorization': `Bearer ${SUPABASE_CONFIG.apiKey}`,
                            'Content-Type': 'application/json'
                        },
                        timeout: 15000
                    });

                    const categories = categoriesResponse.data;
                    
                    // –°–æ–∑–¥–∞–µ–º mapping UUID -> –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    this.categoriesMap = new Map();
                    categories.forEach(category => {
                        this.categoriesMap.set(category.id, category.title);
                    });

                    progress.report({ increment: 30 });

                    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    console.log('Loading documents...');
                    const documentsResponse = await axios.get(ENDPOINTS.documents, {
                        headers: {
                            'apikey': SUPABASE_CONFIG.apiKey,
                            'Authorization': `Bearer ${SUPABASE_CONFIG.apiKey}`,
                            'Content-Type': 'application/json'
                        },
                        timeout: 15000
                    });

                    const documents = documentsResponse.data;
                    
                    // 3. –û–±–æ–≥–∞—â–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    const enrichedDocuments = documents.map(doc => {
                        const categoryTitle = this.categoriesMap.get(doc.category) || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
                        return {
                            ...doc,
                            categoryTitle: categoryTitle,
                            categoryId: doc.category
                        };
                    });

                    progress.report({ increment: 60 });

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è QuickPick
                    this.allDocumentItems = enrichedDocuments.map(doc => ({
                        ...doc,
                        label: doc.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        description: doc.categoryTitle || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                        detail: doc.description ? doc.description.substring(0, 50) + '...' : '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                    }));

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                    this.categoriesData = this.groupDocumentsByCategory(enrichedDocuments);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    this.supabaseData = enrichedDocuments;

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –°–í–ï–†–ù–£–¢–û
                    this.currentCollapseState = vscode.TreeItemCollapsibleState.Collapsed;
                    this.rebuildTreeView();

                    progress.report({ increment: 100 });

                    vscode.window.showInformationMessage(
                        `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ ${this.categoriesData.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≤–µ—Ä–Ω—É—Ç—ã)`
                    );

                    resolve(enrichedDocuments);

                } catch (error) {
                    console.error('Supabase load error:', error.response?.data || error.message);
                    
                    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                    if (error.response) {
                        errorMessage = `HTTP ${error.response.status}: ${error.response.statusText}`;
                        if (error.response.status === 404) {
                            errorMessage += '. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ Supabase.';
                        }
                    } else if (error.request) {
                        errorMessage = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
                    } else {
                        errorMessage = error.message;
                    }
                    
                    reject(new Error(errorMessage));
                }
            });
        });
    }

    // –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    getInitialData() {
        return [
            new TreeItem('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...', vscode.TreeItemCollapsibleState.None, 'loading')
        ];
        // return [
        //     new TreeItem('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...', vscode.TreeItemCollapsibleState.None, 'loading'),
		// 	// new TreeItem('WebSoft Documentation', vscode.TreeItemCollapsibleState.Expanded, 'api', [
        //     //     new TreeItem('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...', vscode.TreeItemCollapsibleState.None, 'loading')
        //     // ]),
        //     // new TreeItem('Lorem Ipsum Dolor', vscode.TreeItemCollapsibleState.Expanded, 'folder', [
        //     //     // new TreeItem('src', vscode.TreeItemCollapsibleState.Collapsed, 'folder', [
        //     //     //     // new TreeItem('App.tsx', vscode.TreeItemCollapsibleState.None, 'typescript'),
        //     //     //     // new TreeItem('index.tsx', vscode.TreeItemCollapsibleState.None, 'typescript')
        //     //     // ]),
        //     //     new TreeItem('package.json', vscode.TreeItemCollapsibleState.None, 'json')
        //     // ]),
            
        // ];
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è QuickPick
    getAllDocumentItems() {
        return this.allDocumentItems;
    }

    // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID
    findDocumentItemById(id) {
        return this.allDocumentItems.find(item => item.id === id);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async autoLoadSupabase() {
        if (this.isLoading) return;
        
        this.isLoading = true;
        console.log('üîÑ Auto-loading documentation from Supabase...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.data[0].children = [
            new TreeItem('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å Supabase...', vscode.TreeItemCollapsibleState.None, 'loading')
        ];
        this._onDidChangeTreeData.fire();
        
        try {
            await this.loadFromSupabase();
            console.log('‚úÖ Supabase data loaded automatically on startup');
        } catch (error) {
            console.error('‚ùå Auto-load failed:', error.message);
            
            // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            let errorDetail = '';
            if (error.message.includes('404')) {
                errorDetail = '–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n- websoft_documentation_developer_data\n- table_category';
            } else if (error.message.includes('–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞')) {
                errorDetail = '–°–µ—Ä–≤–µ—Ä Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            } else {
                errorDetail = error.message;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –¥–µ—Ä–µ–≤–µ
            this.data[0].children = [
                new TreeItem('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', vscode.TreeItemCollapsibleState.None, 'error'),
                new TreeItem(errorDetail, vscode.TreeItemCollapsibleState.None, 'error'),
                new TreeItem('–ù–∞–∂–º–∏—Ç–µ "Load Documentation" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏', vscode.TreeItemCollapsibleState.None, 'file')
            ];
            this._onDidChangeTreeData.fire();
            
            vscode.window.showErrorMessage(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: ${errorDetail}`);
        } finally {
            this.isLoading = false;
        }
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    groupDocumentsByCategory(documents) {
        return documents.reduce((acc, doc) => {
            if (doc.category) {
                const categoryTitle = doc.categoryTitle || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
                if (!acc.has(categoryTitle)) {
                    acc.set(categoryTitle, []);
                }
                acc.get(categoryTitle).push(doc);
            }
            return acc;
        }, new Map());
    }

    getTreeItem(element) {
        console.log(`[getTreeItem] ${element.label} - state:`, element.collapsibleState);
        return element;
    }

    getChildren(element) {
        if (!element) {
            return this.data;
        }
        return element.children;
    }

    refresh() {
        this._onDidChangeTreeData.fire();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    getStats() {
        const totalDocuments = this.supabaseData.length;
        const categoriesCount = this.categoriesMap.size;
        const functionsCount = this.supabaseData.filter(doc => doc.type === 'function').length;
        const documentsCount = this.supabaseData.filter(doc => doc.type !== 'function').length;
        const uncategorizedCount = this.supabaseData.filter(doc => !doc.category).length;

        // console.log(this.loadFromSupabase());
        console.log(totalDocuments);

        return {
            totalDocuments,
            categoriesCount,
            functionsCount,
            documentsCount,
            uncategorizedCount
        };
    }

    // –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    searchDocuments(query) {
        if (!query) return this.allDocumentItems;
        
        const searchTerm = query.toLowerCase();
        return this.allDocumentItems.filter(doc => 
            (doc.title && doc.title.toLowerCase().includes(searchTerm)) ||
            (doc.description && doc.description.toLowerCase().includes(searchTerm)) ||
            (doc.syntax && doc.syntax.toLowerCase().includes(searchTerm)) ||
            (doc.arguments && doc.arguments.toLowerCase().includes(searchTerm)) ||
            (doc.return && doc.return.toLowerCase().includes(searchTerm)) ||
            (doc.content && doc.content.toLowerCase().includes(searchTerm)) ||
            (doc.example_code && doc.example_code.toLowerCase().includes(searchTerm)) ||
            (doc.categoryTitle && doc.categoryTitle.toLowerCase().includes(searchTerm))
        );
    }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
class InfoDataProvider {
    constructor(treeDataProvider) {
        this.treeDataProvider = treeDataProvider;
        this._onDidChangeTreeData = new vscode.EventEmitter();
        this.onDidChangeTreeData = this._onDidChangeTreeData.event;
    }

    refresh() {
        this._onDidChangeTreeData.fire();
    }

    getTreeItem(element) {
        return element;
    }

    getChildren() {
        const stats = this.treeDataProvider.getStats();
        
        return [
            new vscode.TreeItem('üìä Supabase Documentation Statistics', vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem('', vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem(`üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${stats.totalDocuments}`, vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem(`üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.categories}`, vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem(`‚ö° –§—É–Ω–∫—Ü–∏–π: ${stats.functionsCount}`, vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem(`üìù –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${stats.documentsCount}`, vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem('', vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem('üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem('üåê –ò—Å—Ç–æ—á–Ω–∏–∫: Supabase', vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem('', vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem('üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QuickPick –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞', vscode.TreeItemCollapsibleState.None),
            new vscode.TreeItem('   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+P ‚Üí "Search Documentation"', vscode.TreeItemCollapsibleState.None)
        ];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ WebView
function getDocumentationHTML(item) {
    const docData = item.documentationData;

    const result = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body {
                    padding: 15px;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                    line-height: 1.6;
                    color: var(--vscode-foreground);
                    background: var(--vscode-editor-background);
                }
                .header {
                    border-bottom: 1px solid var(--vscode-panel-border);
                    padding: 0;
                    margin-bottom: 0;
                }
                h1 {
                    color: var(--vscode-textLink-foreground);
                    margin: 0 0 10px 0;
                    line-height: normal;
                }
                .argument-elem {
                    margin: 8px 0;
                }
                .argument-elem {
                    font-weight: italic;
                    color: var(--vscode-textLink-foreground);
                }
                .category {
                    display: inline-block;
                    padding: 4px 8px;
                    background: var(--vscode-badge-background);
                    color: var(--vscode-badge-foreground);
                    border-radius: 4px;
                    font-size: 12px;
                    margin-bottom: 10px;
                }
                .section {
                    margin: 0;
                    padding: 15px 0;
                    border-radius: 4px;
                }
                .section h3 {
                    margin-top: 0;
                    color: var(--vscode-textLink-foreground);
                    margin-bottom: 10px;
                }
                pre {
                    background: var(--vscode-textCodeBlock-background);
                    background: #272822;
                    background: var(--vscode-input-background);
                    padding: 15px;
                    border-radius: 4px;
                    overflow-x: auto;
                    white-space: pre-wrap;
                }
                code {
                    font-family: 'Cascadia Code', 'Fira Code', monospace;
                    color: var(--vscode-textLink-foreground);
                    background: none;
                }
                .property {
                    margin: 8px 0;
                }
                .property-name {
                    font-weight: bold;
                    color: var(--vscode-textLink-foreground);
                }
                .content {
                    line-height: 1.6;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>${docData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h1>
                <div class="category">${docData.categoryTitle || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</div>
                ${docData.type ? `<div class="category">–¢–∏–ø: ${docData.type}</div>` : ''}
            </div>

            ${docData.description ? `
            <div class="section">
                <h3>üìã –û–ø–∏—Å–∞–Ω–∏–µ</h3>
                <div class="content">${docData.description.replace(/\n/g, '<br>')}</div>
            </div>
            ` : ''}

            ${docData.syntax ? `
            <div class="section">
                <h3>üìã –°–∏–Ω—Ç–∞–∫—Å–∏—Å</h3>
                <pre><code>${docData.syntax}</code></pre>
            </div>
            ` : ''}

            ${docData.arguments ? `
            <div class="section">
                <h3>üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã</h3>
                <div class="content">${docData.arguments.replace(/\n/g, '<br>')}</div>
            </div>
            ` : ''}

            ${docData.return ? `
            <div class="section">
                <h3>üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ</h3>
                <div class="content">${docData.return.replace(/\n/g, '<br>')}</div>
            </div>
            ` : ''}

            ${docData.content ? `
            <div class="section">
                <h3>üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
                <div class="content">${docData.content.replace(/\n/g, '<br>')}</div>
            </div>
            ` : ''}

            ${docData.example_code ? `
            <div class="section">
                <h3>üí° –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞</h3>
                <pre><code>${docData.example_code}</code></pre>
            </div>
            ` : ''}

            ${docData.parameters ? `
            <div class="section">
                <h3>‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã</h3>
                <pre><code>${JSON.stringify(docData.parameters, null, 2)}</code></pre>
            </div>
            ` : ''}

            <div class="section">
                <h3>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ</h3>
                <div class="property">
                    <span class="property-name">ID:</span> ${docData.id}
                </div>
                ${docData.created_at ? `
                <div class="property">
                    <span class="property-name">–°–æ–∑–¥–∞–Ω:</span> ${new Date(docData.created_at).toLocaleDateString()}
                </div>
                ` : ''}
                ${docData.updated_at ? `
                <div class="property">
                    <span class="property-name">–û–±–Ω–æ–≤–ª–µ–Ω:</span> ${new Date(docData.updated_at).toLocaleDateString()}
                </div>
                ` : ''}
                <div class="property">
                    <span class="property-name">–ò—Å—Ç–æ—á–Ω–∏–∫:</span> Supabase
                </div>
            </div>
        </body>
        </html>
    `;
    console.log(result);
    console.log(`–ü–æ–ª—É—á–µ–Ω HTML –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docData.title}`);
    return result;
}

function activate(context) {
    console.log('TreeView Activity Bar extension activated');
    console.log('Axios version:', axios.VERSION);

    // –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—è–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    let activeDocumentationPanel = null;

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const treeDataProvider = new TreeDataProvider();
    const infoDataProvider = new InfoDataProvider(treeDataProvider);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º TreeView –≤ activity bar
    const treeView = vscode.window.createTreeView('treeview-activitybar-demo.treeView', {
        treeDataProvider: treeDataProvider,
        showCollapseAll: true
    });

    const infoView = vscode.window.createTreeView('treeview-activitybar-demo.infoView', {
        treeDataProvider: infoDataProvider
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    setTimeout(() => {
        treeDataProvider.autoLoadSupabase().then(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            infoDataProvider.refresh();
        });
    }, 1000);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ
    treeView.onDidChangeSelection(event => {
        if (event.selection.length > 0) {
            const selectedItem = event.selection[0];
            if (selectedItem.id) {
                vscode.window.showInformationMessage(`–í—ã–±—Ä–∞–Ω–æ: ${selectedItem.label}`);
            }
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è QuickPick –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    async function showDocumentationQuickPick() {
        const documents = treeDataProvider.getAllDocumentItems();
        
        if (documents.length === 0) {
            vscode.window.showWarningMessage('–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å Supabase.');
            return;
        }

        const items = documents.map(doc => ({
            label: doc.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            // description: doc.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            detail: doc.description ? doc.description.substring(0, 60) + '...' : '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            id: doc.id,
            docData: doc
        }));

        const selected = await vscode.window.showQuickPick(items, {
            placeHolder: 'üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...',
            matchOnDescription: true,
            matchOnDetail: true,
            canPickMany: false
        });

        if (selected) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            vscode.commands.executeCommand('treeview-activitybar-demo.showDocumentation', {
                documentationData: selected.docData,
                label: selected.label,
                id: selected.id
            });
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    async function showFilteredDocumentationQuickPick() {
        const documents = treeDataProvider.getAllDocumentItems();
        
        if (documents.length === 0) {
            vscode.window.showWarningMessage('–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å Supabase.');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categories = [...new Set(documents.map(doc => doc.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))];
        
        const categoryItems = categories.map(category => ({
            label: category,
            description: `–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"`,
            category: category
        }));

        const selectedCategory = await vscode.window.showQuickPick(categoryItems, {
            placeHolder: 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞...'
        });

        if (!selectedCategory) return;

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const filteredDocs = documents.filter(doc => 
            (doc.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') === selectedCategory.category
        );

        if (filteredDocs.length === 0) {
            vscode.window.showInformationMessage(`–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${selectedCategory.label}`);
            return;
        }

        const items = filteredDocs.map(doc => ({
            label: doc.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            description: doc.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            detail: doc.description ? doc.description.substring(0, 60) + '...' : '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            id: doc.id,
            docData: doc
        }));

        const selected = await vscode.window.showQuickPick(items, {
            placeHolder: `üîç –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${selectedCategory.label}"...`,
            matchOnDescription: true,
            matchOnDetail: true
        });

        if (selected) {
            vscode.commands.executeCommand('treeview-activitybar-demo.showDocumentation', {
                documentationData: selected.docData,
                label: selected.label,
                id: selected.id
            });
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    const commands = [
        vscode.commands.registerCommand('treeview-activitybar-demo.refresh', () => {
            treeDataProvider.loadFromSupabase().then(() => {
                infoDataProvider.refresh();
            });
        }),

        vscode.commands.registerCommand('treeview-activitybar-demo.loadFromSupabase', () => {
            treeDataProvider.loadFromSupabase().then(() => {
                infoDataProvider.refresh();
            });
        }),

        // vscode.commands.registerCommand('treeview-activitybar-demo.showDocumentation', async (item) => {
        //     if (!item.documentationData) {
        //         vscode.window.showWarningMessage('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
        //         return;
        //     }

        //     try {
        //         const panel = vscode.window.createWebviewPanel(
        //             'documentationView',
        //             `üìö ${item.documentationData.title || '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'}`,
        //             vscode.ViewColumn.Beside,
        //             {
        //                 enableScripts: true,
        //                 retainContextWhenHidden: true,
        //                 localResourceRoots: []
        //             }
        //         );

        //         panel.webview.html = getDocumentationHTML(item);

        //     } catch (error) {
        //         vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${error.message}`);
        //     }
        // }),

        // QuickPick –∫–æ–º–∞–Ω–¥—ã
        vscode.commands.registerCommand('treeview-activitybar-demo.showDocumentation', async (item) => {
            if (!item.documentationData) {
                vscode.window.showWarningMessage('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
                return;
            }

            try {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                if (activeDocumentationPanel) {
                    activeDocumentationPanel.dispose();
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å
                activeDocumentationPanel = vscode.window.createWebviewPanel(
                    'documentationView',
                    `üìö ${item.documentationData.title || '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'}`,
                    vscode.ViewColumn.Beside,
                    {
                        enableScripts: true,
                        retainContextWhenHidden: true,
                        localResourceRoots: []
                    }
                );

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
                activeDocumentationPanel.webview.html = getDocumentationHTML(item);

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
                activeDocumentationPanel.onDidDispose(() => {
                    activeDocumentationPanel = null;
                }, null, context.subscriptions);

            } catch (error) {
                vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${error.message}`);
            }
        }),

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
        vscode.commands.registerCommand('treeview-activitybar-demo.closeAllDocumentation', () => {
            if (activeDocumentationPanel) {
                activeDocumentationPanel.dispose();
                activeDocumentationPanel = null;
                vscode.window.showInformationMessage('–í—Å–µ –ø–∞–Ω–µ–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã');
            }
        }),

        vscode.commands.registerCommand('treeview-activitybar-demo.searchDocumentation', showDocumentationQuickPick),
        vscode.commands.registerCommand('treeview-activitybar-demo.filterDocumentation', showFilteredDocumentationQuickPick)
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    commands.forEach(command => context.subscriptions.push(command));
    context.subscriptions.push(treeView);
    context.subscriptions.push(infoView);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const quickPickStatusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
    quickPickStatusBar.text = '$(search) Search Docs';
    quickPickStatusBar.tooltip = '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏';
    quickPickStatusBar.command = 'treeview-activitybar-demo.searchDocumentation';
    quickPickStatusBar.show();
    context.subscriptions.push(quickPickStatusBar);
}

function deactivate() {}

module.exports = {
    activate,
    deactivate
};